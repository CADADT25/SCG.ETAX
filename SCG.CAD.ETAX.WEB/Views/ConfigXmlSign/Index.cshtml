@{
    ViewData["Title"] = "Product Unit Profile";
    Layout = null;
}


@await Html.PartialAsync("~/Views/ConfigXmlSign/_Content.cshtml")


<script type="text/javascript">

    $(document).ready(function () {

        var setCompanyCode = $("#companyCodeState").text();

        setTimeout(function(){
            RenderConfigXmlSign(setCompanyCode);
        }, 1200);

    });

    $(window).on('load', function() {

        $('#modalInsertConfigXmlSign').select2({
            dropdownParent: $('#modalInsertConfigXmlSign')
        });

    });

     function fnDropdownConfigXmlSignDataSource() {

        $('#ddlInsertConfigXmlSignInputSource').empty();
        $('#ddlInsertConfigXmlSignOutputSource').empty();
        $('#ddlInsertConfigXmlSignOutputConvertSource').empty();

        $('#ddlUpdateConfigXmlSignInputSource').empty();
        $('#ddlUpdateConfigXmlSignOutputSource').empty();
        $('#ddlUpdateConfigXmlSignOutputConvertSource').empty();

        $('<option>',
        {
            value: 0,
        }).html("--- Select Data Source ---").appendTo("#ddlInsertConfigXmlSignInputSource");

        $('<option>',
        {
            value: 0,
        }).html("--- Select Data Source ---").appendTo("#ddlInsertConfigXmlSignOutputSource");

        $('<option>',
        {
            value: 0,
        }).html("--- Select Data Source ---").appendTo("#ddlInsertConfigXmlSignOutputConvertSource");
        


        $.getJSON("@Url.Action("DropDownList", "ProfileDataSource")", function (data) {
            $.each(data, function (i, data) {

                

                $('<option>',
                    {
                        value: data.dataSourceName,
                        text: data.dataSourceName
                    }).html(data.dataSourceName).appendTo("#ddlInsertConfigXmlSignInputSource");

                $('<option>',
                    {
                        value: data.dataSourceName,
                        text: data.dataSourceName
                    }).html(data.dataSourceName).appendTo("#ddlInsertConfigXmlSignOutputSource");

                $('<option>',
                    {
                        value: data.dataSourceName,
                        text: data.dataSourceName
                    }).html(data.dataSourceName).appendTo("#ddlInsertConfigXmlSignOutputConvertSource");


                

                $('<option>',
                    {
                        value: data.dataSourceName,
                        text: data.dataSourceName
                    }).html(data.dataSourceName).appendTo("#ddlUpdateConfigXmlSignInputSource");

                $('<option>',
                    {
                        value: data.dataSourceName,
                        text: data.dataSourceName
                    }).html(data.dataSourceName).appendTo("#ddlUpdateConfigXmlSignOutputSource");

                $('<option>',
                    {
                        value: data.dataSourceName,
                        text: data.dataSourceName
                    }).html(data.dataSourceName).appendTo("#ddlUpdateConfigXmlSignOutputConvertSource");

            });


        })
    }

    function onChangeBathXmlSign(){
        $('#toggleInsertConfigXmlSignIsBatch').prop('checked', true)
        $('#toggleInsertConfigXmlSignIsOnline').prop('checked', false)

        $('#ddlInsertConfigXmlSignInputSource').prop('disabled', false)
        $('#txtInsertConfigXmlSignInputPath').prop('disabled', false)
        $('#ddlInsertConfigXmlSignOutputSource').prop('disabled', false)
        $('#txtInsertConfigXmlSignOutputPath').prop('disabled', false)
        $('#ddlInsertConfigXmlSignOutputConvertSource').prop('disabled', false)
        $('#txtInsertConfigXmlSignOutputConvertPath').prop('disabled', false)
        $('#txtInsertConfigXmlSignOnlineRecordNumber').prop('disabled', true)
        $('#txtInsertConfigXmlSignOnlineRecordNumber').val('');
    }

    function onChangeOnlineXmlSign(){

        $('#toggleInsertConfigXmlSignIsOnline').prop('checked', true)
        $('#toggleInsertConfigXmlSignIsBatch').prop('checked', false)

        $('#ddlInsertConfigXmlSignInputSource').prop('disabled', true)
        $('#txtInsertConfigXmlSignInputPath').prop('disabled', true)
        $('#ddlInsertConfigXmlSignOutputSource').prop('disabled', true)
        $('#txtInsertConfigXmlSignOutputPath').prop('disabled', true)
        $('#ddlInsertConfigXmlSignOutputConvertSource').prop('disabled', true)
        $('#txtInsertConfigXmlSignOutputConvertPath').prop('disabled', true)
        $('#txtInsertConfigXmlSignOnlineRecordNumber').prop('disabled', false)
    }


    function onChangeBathXmlSignUpdate(){
        $('#toggleUpdateConfigXmlSignIsBatch').prop('checked', true)
        $('#toggleUpdateConfigXmlSignIsOnline').prop('checked', false)

        $('#ddlUpdateConfigXmlSignInputSource').prop('disabled', false)
        $('#txtUpdateConfigXmlSignInputPath').prop('disabled', false)
        $('#ddlUpdateConfigXmlSignOutputSource').prop('disabled', false)
        $('#txtUpdateConfigXmlSignOutputPath').prop('disabled', false)
        $('#ddlUpdateConfigXmlSignOutputConvertSource').prop('disabled', false)
        $('#txtUpdateConfigXmlSignOutputConvertPath').prop('disabled', false)
        $('#txtUpdateConfigXmlSignOnlineRecordNumber').prop('disabled', true)
        $('#txtUpdateConfigXmlSignOnlineRecordNumber').val('');
    }

    function onChangeOnlineXmlSignUpdate(){

        $('#toggleUpdateConfigXmlSignIsBatch').prop('checked', false)
        $('#toggleUpdateConfigXmlSignIsOnline').prop('checked', true)

        $('#ddlUpdateConfigXmlSignInputSource').prop('disabled', true)
        $('#txtUpdateConfigXmlSignInputPath').prop('disabled', true)
        $('#ddlUpdateConfigXmlSignOutputSource').prop('disabled', true)
        $('#txtUpdateConfigXmlSignOutputPath').prop('disabled', true)
        $('#ddlUpdateConfigXmlSignOutputConvertSource').prop('disabled', true)
        $('#txtUpdateConfigXmlSignOutputConvertPath').prop('disabled', true)
        $('#txtUpdateConfigXmlSignOnlineRecordNumber').prop('disabled', false)
    }

    function RenderConfigXmlSign(setCompanyCode){

        if(setCompanyCode == null || setCompanyCode == ''){
            setCompanyCode = $("#companyCodeStateUpdate").text();

            if(setCompanyCode == null || setCompanyCode == ''){
                setCompanyCode = $("#companyCodeState").text();
            }
        }

        var table = $("#tbConfigXmlSignMain").DataTable({
            destroy: true,
            "scrollY": false,
            "processing": true, // for show progress bar
            "serverSide": false, // for process server side
            "filter": true, // this is for disable filter (search box)
            "orderMulti": true, // for disable multiple column at once
            "pageLength": 10,

            "ajax": {
                url: "@Url.Action("List", "ConfigXmlSign")",
                type: "POST",
                data: { companyCode : setCompanyCode },
                datatype: "json"
            },


            "columns": [

                {
                    data: "configXmlsignNo",
                    className: "text-center",
                    width: "5%",
                    visible: false
                },
                {
                    //data: "ConfigXmlSignNo",
                    className: "text-center",
                    width: "5%",
                    render: function (data, type, row, meta) {
                        return meta.row + meta.settings._iDisplayStart + 1;
                    }
                },
                {
                    data: "configXmlsignInputPath",
                    width: "10%"
                },
                {
                    data: "configXmlsignOutputPath",
                    width: "10%"
                },
                //{
                //    data: "configXmlsignNo",
                //    width: "13%",
                //    render: function (data, type, row) {
                //        return'<a onclick="callModalInsertConfigMftsEmailSettingOneTime(' + data +')" class="btn btn-primary btn-sm"> One time </a>';
                //    }
                //},
                //{
                //    data: "configXmlsignNo",
                //    width: "13%",
                //    render: function (data, type, row) {
                //        return'<a onclick="callModalInsertConfigMftsEmailSettingAnyTime(' + data +')" class="btn btn-primary btn-sm"> Any Time </a>';
                //    }
                //},
                {
                    data: "isactive",
                    width: "2%",
                    className: "text-center",
                    orderable: false,
                    render: function (data, type, row) {
                        return (data == 1) ? '<i class="text-success fas fa-check"/>' : '<i class="text-danger fas fa-ban"/>';
                    }
                },
                {
                    data: null,
                    className: "dt-center editor-edit text-center text-primary",
                    defaultContent: '<i class="pointer fas fa-pen"/> </i>',
                    orderable: false,
                    width: "2%"
                }
            ]
        });

        table.on( 'order.dt search.dt', function () {
            table.column(1, {search:'applied', order:'applied'}).nodes().each( function (cell, i) {
                cell.innerHTML = i+1;
            } );
        } ).draw();

        EditConfigXmlSign(table);
        DeleteConfigXmlSign(table);
    }


    function fnInsertCancelConfigXmlSign(){

        $("#modalInsertConfigXmlSign").modal('hide');
    }

    function fnUpdateCancelConfigXmlSign(){

        $("#modalUpdateConfigXmlSign").modal('hide');
    }

    function callModalInsertConfigXmlSign(){

        var setCompanyCode = $("#companyCodeStateUpdate").text();

        if(setCompanyCode == null || setCompanyCode == ''){
            setCompanyCode = $("#companyCodeStateUpdate").text();

            if(setCompanyCode == null || setCompanyCode == ''){
                setCompanyCode = $("#companyCodeState").text();
            }   
        }


        var setTaxNumber = $("#txtUpdateProfileCompanyTaxNumber").val();

        if(setTaxNumber == null || setTaxNumber == ''){
            setTaxNumber = $("#txtUpdateProfileCompanyTaxNumber").val();

            if(setTaxNumber == null || setTaxNumber == ''){
                setTaxNumber = $("#txtInsertProfileCompanyTaxNumber").val();
            }   
        }

        document.getElementById('txtInsertConfigXmlSignCompanyCode').value = setCompanyCode;
        document.getElementById('txtInsertConfigXmlSignTaxNumber').value = setTaxNumber;

        fnDropdownConfigXmlSignDataSource();

        $("#modalInsertConfigXmlSign").modal('show');
    }

     function fnInsertConfigXmlSign(){
        if ($('#txtInsertConfigXmlSignCompanyCode').val() != '' && $('#ddlInsertConfigXmlSignInputSource').val() != '') {
            callConfigXmlSignInsertController();
        }
        else {
            validateInsertConfigXmlSign();

            fnToastrInputDataFail();
        }
    }

    function fnUpdateConfigXmlSign(){
        if ($('#txtUpdateConfigXmlSignCompanyCode').val() != '' && $('#txtUpdateConfigXmlSignInputSource').val() != '') {
            callConfigXmlSignUpdateController();
        }
        else {
            validateUpdateConfigXmlSign();

            fnToastrInputDataFail();
        }
    }

    function EditConfigXmlSign(table){

        $('#tbConfigXmlSignMain').on('click', 'td.editor-edit', function () {

            var data = table.row($(this).closest('tr')).data();

            var getPK = data[Object.keys(data)[0]];

            callConfigXmlSignGetDetailController(getPK);
        });
    }

    function DeleteConfigXmlSign(table){

        $('#tbConfigXmlSignMain').on('click', 'td.editor-delete', function () {

            var data = table.row($(this).closest('tr')).data();

            var getPK = data[Object.keys(data)[0]];

            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!',
                confirmButtonClass: 'btn btn-primary',
                cancelButtonClass: 'btn btn-danger ml-1',
                buttonsStyling: false,
                }).then(function (result) {
                    if (result) {
                        callConfigXmlSignDeleteController(getPK);
                        callConfigXmlSignIndex();
                      }
                    })
        });
    }

    function ExportConfigXmlSign(){

        $.blockUI();

        callConfigXmlSignExportController();

        $.unblockUI();
    }


    // [Begin] Ajax call Controller

    function callConfigXmlSignGetDetailController(getPK){

        fnDropdownConfigXmlSignDataSource();

        $.ajax({
            type: "GET",
            url: "@Url.Action("Detail", "ConfigXmlSign")",
            data: { id : getPK },
            dataType: "json",
            success: function (result) {

                data = $.parseJSON(result)

                document.getElementById('txtUpdateConfigXmlSignNo').value = data.ConfigXmlsignNo;
                document.getElementById('txtUpdateConfigXmlSignCompanyCode').value = data.ConfigXmlsignCompanycode;
                document.getElementById('txtUpdateConfigXmlSignTaxNumber').value = data.ConfigXmlsignCompanyTax;

                if(data.ConfigXmlsignOnlineRecordNumber == '' || data.ConfigXmlsignOnlineRecordNumber == null){

                    

                    document.getElementById("toggleUpdateConfigXmlSignIsBatch").checked = true;
                    document.getElementById("toggleUpdateConfigXmlSignIsOnline").checked = false;

                    $('#ddlUpdateConfigXmlSignInputSource').prop('disabled', false)
                    $('#txtUpdateConfigXmlSignInputPath').prop('disabled', false)
                    $('#ddlUpdateConfigXmlSignOutputSource').prop('disabled', false)
                    $('#txtUpdateConfigXmlSignOutputPath').prop('disabled', false)
                    $('#ddlUpdateConfigXmlSignOutputConvertSource').prop('disabled', false)
                    $('#txtUpdateConfigXmlSignOutputConvertPath').prop('disabled', false)

                }else{
                    document.getElementById("toggleUpdateConfigXmlSignIsBatch").checked = false;
                    document.getElementById("toggleUpdateConfigXmlSignIsOnline").checked = true;

                    $('#ddlUpdateConfigXmlSignInputSource').prop('disabled', true)
                    $('#txtUpdateConfigXmlSignInputPath').prop('disabled', true)
                    $('#ddlUpdateConfigXmlSignOutputSource').prop('disabled', true)
                    $('#txtUpdateConfigXmlSignOutputPath').prop('disabled', true)
                    $('#ddlUpdateConfigXmlSignOutputConvertSource').prop('disabled', true)
                    $('#txtUpdateConfigXmlSignOutputConvertPath').prop('disabled', true)
                }

                document.getElementById('ddlUpdateConfigXmlSignInputSource').value = data.ConfigXmlsignInputSource;
                document.getElementById('txtUpdateConfigXmlSignInputPath').value = data.ConfigXmlsignInputPath;

                document.getElementById('ddlUpdateConfigXmlSignOutputSource').value = data.ConfigXmlsignOutputSource;
                document.getElementById('txtUpdateConfigXmlSignOutputPath').value = data.ConfigXmlsignOutputPath;

                document.getElementById('ddlUpdateConfigXmlSignOutputConvertSource').value = data.ConfigXmlsignOutputConvertSource;
                document.getElementById('txtUpdateConfigXmlSignOutputConvertPath').value = data.ConfigXmlsignOutputConvertPath;


                if(data.Isactive == 1){
                    document.getElementById("toggleUpdateConfigXmlSignIsActive").checked = true;
                }
                else{
                    document.getElementById("toggleUpdateConfigXmlSignIsActive").checked = false;
                }

                $("#modalUpdateConfigXmlSign").modal('show');

            }
        });
    }

    function callConfigXmlSignInsertController(){

        var IsActive = 1;

        if($('#toggleInsertConfigXmlSignIsActive').prop('checked')){
            IsActive = 1;
        }
        else{
            IsActive = 0;
        }

        

        var model = new Object();

        model.ConfigXmlsignCompanycode = $('#txtInsertConfigXmlSignCompanyCode').val();
        model.ConfigXmlsignCompanyTax = $('#txtInsertConfigXmlSignTaxNumber').val();

        if($('#toggleInsertConfigXmlSignIsBatch').prop('checked')){

            model.ConfigXmlSignInputSource = $('#ddlInsertConfigXmlSignInputSource').val();
            model.ConfigXmlSignInputPath = $('#txtInsertConfigXmlSignInputPath').val();
            model.ConfigXmlSignOutputSource = $('#ddlInsertConfigXmlSignOutputSource').val();
            model.ConfigXmlSignOutputPath = $('#txtInsertConfigXmlSignOutputPath').val();

            model.ConfigXmlsignOutputConvertSource = $('#ddlInsertConfigXmlSignOutputConvertSource').val();
            model.ConfigXmlsignOutputConvertPath = $('#txtInsertConfigXmlSignOutputConvertPath').val();
        }
        else{
            model.ConfigXmlSignInputSource = '';
            model.ConfigXmlSignInputPath = '';
            model.ConfigXmlSignOutputSource = '';
            model.ConfigXmlSignOutputPath = '';
            model.ConfigXmlsignOutputConvertSource = '';
            model.ConfigXmlsignOutputConvertPath = '';
        }

        
        model.ConfigXmlSignOnlineRecordNumber = $('#txtInsertConfigXmlSignOnlineRecordNumber').val();
        model.CreateBy = $("#leftSideEmail").text();
        model.CreateDate = new Date();
        model.UpdateBy = $("#leftSideEmail").text();
        model.UpdateDate = new Date();
        model.Isactive = IsActive;

        var getJsonString = JSON.stringify(model);

        $.ajax({
            type: "POST",
            url: "@Url.Action("Insert", "ConfigXmlSign")",
            data: { jsonString : getJsonString },
            dataType: "text",
            success: function (resp) {

                data = $.parseJSON(resp)

                var errorMessage = data.erroR_MESSAGE;

                if(data.status == true){

                    fnSweetAlert_SaveSuccess();

                    $("#modalInsertConfigXmlSign").modal('hide');

                    callConfigXmlSignIndex();
                }
                else{
                    fnSweetAlert_Error(errorMessage);
                }
            }
        });
    }

    function callConfigXmlSignUpdateController(){

        var IsActive = 1;

        if($('#toggleUpdateConfigXmlSignIsActive').prop('checked')){
            IsActive = 1;
        }
        else{
            IsActive = 0;
        }

        var model = new Object();

        model.ConfigXmlSignNo = $('#txtUpdateConfigXmlSignNo').val();
        model.ConfigXmlsignCompanycode = $('#txtUpdateConfigXmlSignCompanyCode').val();
        model.ConfigXmlsignCompanyTax = $('#txtUpdateConfigXmlSignTaxNumber').val();


        if($('#toggleUpdateConfigXmlSignIsBatch').prop('checked')){

            model.ConfigXmlSignInputSource = $('#ddlUpdateConfigXmlSignInputSource').val();
            model.ConfigXmlSignInputPath = $('#txtUpdateConfigXmlSignInputPath').val();
            model.ConfigXmlSignOutputSource = $('#ddlUpdateConfigXmlSignOutputSource').val();
            model.ConfigXmlSignOutputPath = $('#txtUpdateConfigXmlSignOutputPath').val();

            model.ConfigXmlsignOutputConvertSource = $('#ddlUpdateConfigXmlSignOutputConvertSource').val();
            model.ConfigXmlsignOutputConvertPath = $('#txtUpdateConfigXmlSignOutputConvertPath').val();
        }
        else{
            model.ConfigXmlSignInputSource = '';
            model.ConfigXmlSignInputPath = '';
            model.ConfigXmlSignOutputSource = '';
            model.ConfigXmlSignOutputPath = '';
            model.ConfigXmlsignOutputConvertSource = '';
            model.ConfigXmlsignOutputConvertPath = '';
        }

        
        model.ConfigXmlSignOnlineRecordNumber = $('#txtUpdateConfigXmlSignOnlineRecordNumber').val();
        model.CreateBy = $("#leftSideEmail").text();
        model.CreateDate = new Date();
        model.UpdateBy = $("#leftSideEmail").text();
        model.UpdateDate = new Date();
        model.Isactive = IsActive;

        var getJsonString = JSON.stringify(model);

        $.ajax({
            type: "POST",
            url: "@Url.Action("Update", "ConfigXmlSign")",
            data: { jsonString : getJsonString },
            dataType: "text",
            success: function (resp) {

                data = $.parseJSON(resp)

                var errorMessage = data.erroR_MESSAGE;

                if(data.status == true){

                    fnSweetAlert_SaveSuccess();

                    $("#modalUpdateConfigXmlSign").modal('hide');

                    callConfigXmlSignIndex();

                }
                else{
                    fnSweetAlert_Error(errorMessage);
                }
            }
        });
    }

    function callConfigXmlSignDeleteController(getPK){

        var model = new Object();

        model.ConfigXmlSignNo = getPK;
        model.ConfigXmlsignCompanycode = '';
        model.ConfigXmlsignCompanyTax = '';
        model.ConfigXmlSignInputSource = '';
        model.ConfigXmlSignInputPath = '';
        model.ConfigXmlSignOutputSource = '';
        model.ConfigXmlSignOutputPath = '';
        model.ConfigXmlsignOutputConvertSource = '';
        model.ConfigXmlsignOutputConvertPath = '';
        model.ConfigXmlSignOnlineRecordNumber = '';
        model.CreateBy = $("#leftSideEmail").text();
        model.CreateDate = new Date();
        model.UpdateBy = $("#leftSideEmail").text();
        model.UpdateDate = new Date();
        model.Isactive = 0;

        var getJsonString = JSON.stringify(model);

        $.ajax({
            type: "POST",
            url: "@Url.Action("Delete", "ConfigXmlSign")",
            data: { jsonString : getJsonString },
            dataType: "text",
            success: function () {
                    fnSweetAlert_DeleteSuccess();
                }
        });
    }

    function callConfigXmlSignExportController(){
        $.ajax({
            type: "GET",
            url: "@Url.Action("ExportToCsv", "ConfigXmlSign")",
            //data: { id : getPK },
            contentType: 'application/json; charset=utf-8',
            //dataType: "json",
            success: function (response) {

                var blob = new Blob([response], {type: 'text/csv;charset=utf-8;'});

                var downloadUrl = URL.createObjectURL(blob);

                var a = document.createElement("a");

                a.href = downloadUrl;

                a.download = "scg-etax-ConfigXmlSign.csv";

                document.body.appendChild(a);

                a.click();
            }
        });
    }

    // [end] Ajax call Controller




    function callConfigXmlSignIndex() {
        setTimeout(function(){
            $.blockUI();
            $("#render-configXmlSign-create").load("@Url.Action("Index", "ConfigXmlSign")");

            $("#render-configXmlSign-update").empty();
            $("#render-configXmlSign-update").load("@Url.Action("Index", "ConfigXmlSign")");
            $.unblockUI();
        }, 500);
    }


</script>






