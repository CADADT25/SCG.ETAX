@{
    ViewData["Title"] = "Transaction Profile";
    Layout = null;
}
<style>
    .hovertext {
      position: relative;
    }
    .hovertext:before {
      content: attr(data-hover);
      visibility: hidden;
      opacity: 0;
      font-size: 14px;
      /*width: 140px;*/
      /*background-color: black;*/
      /*color: #fff;*/
      text-align: center;
      border-radius: 5px;
      padding: 5px 0;
      transition: opacity 1s ease-in-out;

      position: absolute;
      top: 100%;
      left: 105%;
      margin-left: -45px;
    }

    .hovertext:hover:before {
      opacity: 1;
      visibility: visible;
    }
    
    .hoversuccess{
        color: green;
    }
    .hoverfail{
        color: red;
    }
    .hoverwait{
        color: yellow;
    }
</style>
@await Html.PartialAsync("~/Views/transactionDescription/_Search.cshtml")


@await Html.PartialAsync("~/Views/transactionDescription/_Content.cshtml")

<script type="text/javascript">
    var _dataExchangeColumnList = null;
     $(document).ready(function () {

        $('#tranSearchStatus').select2();
        $('#tranSearchIcOc').select2();
        $('#tranSearchCompanyCode').select2();
        $('#tranSearchOutputType').select2();
        $('#tranSearchDocumentType').select2();
        $('#tranSearchDateType').select2();
        $('#tranSearchDataSource').select2();
        //$('#tranSearchSellOrg').select2();

        $("#tranSearchDateRang").flatpickr({
            mode: "range",
            altInput: true,
            dateFormat: "d-m-Y",
        });

        fnDropdownTransactionSearchCompanyCode();
        fnDropdownTransactionSearchDocumentType();
        fnDropdownTransactionSearchDataSource();
        //fnDropdownTransactionSearchSellOrg();

        RenderTransaction();

    });


    function RenderTransaction(){

        $('[data-toggle="tooltip"]').tooltip();

        var table = $("#tbTransactionMain").DataTable({

            "scrollY": false,
            "processing": true, // for show progress bar
            "serverSide": false, // for process server side
            "filter": true, // this is for disable filter (search box)
            "orderMulti": true, // for disable multiple column at once
            "pageLength": 50,
            "scrollX": true,

            "ajax": {
                url: "@Url.Action("List", "transactionDescription")",
                type: "POST",
                datatype: "json"
            },


            "columns": [

                {
                    width: "2%",
                    render: function (data, type, full, meta){
                        return '<input type="checkbox" class="dt-checkboxes" name="id[]" value="' + $('<div/>').text(data).html() + '">';}
                },

                {
                    data: "billingNumber",
                    width: "10%",
                    render: function (data, type, row) {
                        return' '+ data.substr( 0, 100 ) +  ' <a onclick="fnCallBillingDetail(' + row['transactionNo'] +');"> <i class="fas fa-eye text-primary"> </i> </a>';
                    }
                },
                {
                    data: "postingYear",
                    width: "5%",
                    render: function (data, type, row) {
                        return data != null ?' '+ data.substr( 0, 100 ) +  ' <a onclick="fnCallBillingDetail(' + row['transactionNo'] +');"> <i class="fas fa-pen text-primary"> </i> </a>': ' <a onclick="fnCallBillingDetail(' + row['transactionNo'] +');"> <i class="fas fa-pen text-primary"> </i> </a>';
                    }
                },
                {
                    data: "companyCode",
                    width: "5%"
                },
                {
                    data: "customerId",
                    width: "5%"
                },
                {
                    data: "ic",
                    width: "5%",
                    render: function (data, type, row) {
                        return data == null ? '' : (data == "1") ? 'IC' : 'O2C';
                    }
                },
                {
                    data: "docType",
                    width: "5%"
                },
                {
                    data: "sourceName",
                    width: "5%"
                },
                {
                    data: "billingDate",
                    width: "10%",
                    className: "text-center",
                    render: function(data, type, row, meta) {
                            return moment(data).format('DD-MM-YYYY');
                    }
                },
                {
                    data: "processingDate",
                    width: "10%",
                    className: "text-center",
                    render: function(data, type, row, meta) {
                            return data == null ? '' : moment(data).format('DD-MM-YYYY');
                    }
                },
                {
                    data: "createDate",
                    width: "10%",
                    className: "text-center",
                    render: function(data, type, row, meta) {
                            return moment(data).format('DD-MM-YYYY');
                    }
                },
                {
                    data: "generateStatus",
                    width: "2%",
                    render: function (data, type, row) {
                        return fnCheckStatus(data);
                    }
                },
                {
                    data: "xmlSignStatus",
                    width: "3%",
                    render: function (data, type, row) {
                        return fnCheckStatus(data);
                    }
                },
                {
                    data: "pdfSignStatus",
                    width: "3%",
                    render: function (data, type, row) {
                        return fnCheckStatus(data);
                    }
                },
                {
                    data: "printStatus",
                    width: "3%",
                    render: function (data, type, row) {
                        return fnCheckStatus(data);
                    }
                },
                {
                    data: "emailSendStatus",
                    width: "3%",
                    render: function (data, type, row) {
                        return fnCheckStatus(data);
                    }
                },
                {
                    data: "xmlCompressStatus",
                    width: "3%",
                    render: function (data, type, row) {
                        return fnCheckStatus(data);
                    }
                },
                {
                    data: "pdfIndexingStatus",
                    width: "2%",
                    render: function (data, type, row) {
                        return fnCheckStatus(data);
                    }
                }
            ],
            //select: {
            //style:    'os',
            //selector: 'td:first-child'
        //},
        });




    }


    function fnCallBillingDetail(getPk){

        $.ajax({
            type: "GET",
            url: "@Url.Action("Detail", "TransactionDescription")",
            data: { id : getPk },
            dataType: "json",
            success: function (result) {

                data = $.parseJSON(result);
                if(typeof data.OutputMailTransactionNo != 'undefined'){
                    fnCallOutputSearchEmailDetail(data.OutputMailTransactionNo);
                }
                if(typeof data.OutputPdfTransactionNo != 'undefined'){
                    fnCallOutputSearchPrintingDetail(data.OutputPdfTransactionNo);
                }
                if(typeof data.OutputXmlTransactionNo != 'undefined'){
                    fnCallOutputSearchXmlZipDetail(data.OutputXmlTransactionNo);
                }

                // Billing Date format
                var billingDate = new Date(data.BillingDate);

                let setBillingDate = billingDate;
                let monthBillingDate = (setBillingDate.getMonth() + 1).toString().padStart(2, '0');
                let dayBillingDate = setBillingDate.getDate().toString().padStart(2, '0');
                let yearBillingDate = setBillingDate.getFullYear();

                let newBillingDate = dayBillingDate+" - "+monthBillingDate+" - "+yearBillingDate;


                // Processing Date format

                var processingDate = new Date(data.BillingDate);

                let setProcessingDate = processingDate;

                let monthProcessingDate = (setProcessingDate.getMonth() + 1).toString().padStart(2, '0');
                let dayProcessingDate = setProcessingDate.getDate().toString().padStart(2, '0');
                let yearProcessingDate = setProcessingDate.getFullYear();

                let newProcessingDate = dayProcessingDate+" - "+monthProcessingDate+" - "+yearProcessingDate;


                $('#txtViewTransactionDecriptionBillingNo').text(data.BillingNumber);
                $('#txtViewTransactionDecriptionBillingDate').text(newBillingDate);
                $('#txtViewTransactionDecriptionProcessingDate').text(newProcessingDate);

                $('#txtViewTransactionDecriptionCompanyCode').text(data.CompanyCode);
                $('#txtViewTransactionDecriptionCustomerCode').text(data.CustomerId);
                $('#txtViewTransactionDecriptionCompanyName').text(data.CompanyName);
                $('#txtViewTransactionDecriptionCustomerName').text(data.CustomerName);

                $('#txtViewTransactionDecriptionSoldTo').text(data.SoldTo);
                $('#txtViewTransactionDecriptionShipTo').text(data.ShipTo);
                $('#txtViewTransactionDecriptionBillTo').text(data.BillTo);
                $('#txtViewTransactionDecriptionPayer').text(data.Payer);

                $('#txtViewTransactionDecriptionDocTypeCode').text(data.DocType);
                $('#txtViewTransactionDecriptionDataSource').text(data.SourceName);

                $('#txtViewTransactionDecriptionGenerateDetail').text(data.GenerateDetail);
                $('#txtViewTransactionDecriptionGenerateStatus').text(data.GenerateStatus);
                $('#txtViewTransactionDecriptionGenerateDateTime').text(data.GenerateDateTime);

                $('#txtViewTransactionDecriptionXmlSignDetail').text(data.XmlSignDetail);
                $('#txtViewTransactionDecriptionXmlSignStatus').text(data.XmlSignStatus);
                $('#txtViewTransactionDecriptionXmlSignDateTime').text(data.XmlSignDateTime);
                if(data.XmlSignStatus == "Successful"){
                    $('#downloadxmlfile').empty();
                    $('#downloadxmlfile').append("<a onclick='DownloadFileXML(" + data.TransactionNo + ")' class='btn btn-primary btn-sm'> Download </a>");
                }

                $('#txtViewTransactionDecriptionPdfSignDetail').text(data.PdfSignDetail);
                $('#txtViewTransactionDecriptionPdfSignStatus').text(data.PdfSignStatus);
                $('#txtViewTransactionDecriptionPdfSignDateTime').text(data.PdfSignDateTime);
                
                if(data.PdfSignStatus == "Successful"){
                    $('#downloadpdffile').empty();
                    $('#downloadpdffile').append("<a onclick='DownloadFilePDF(" + data.TransactionNo + ")' class='btn btn-primary btn-sm'> Download </a>");
                }

                $('#txtViewTransactionDecriptionPrintDetail').text(data.PrintDetail);
                $('#txtViewTransactionDecriptionPrintStatus').text(data.PrintStatus);
                $('#txtViewTransactionDecriptionPrintDateTime').text(data.PrintDateTime);

                $('#txtViewTransactionDecriptionEmailSendDetail').text(data.EmailSendDetail);
                $('#txtViewTransactionDecriptionEmailSendStatus').text(data.EmailSendStatus);
                $('#txtViewTransactionDecriptionEmailSendDateTime').text(data.EmailSendDateTime);
                              
                $('#resendemail').empty();      
                $('#resendemail').append("<a onclick='fnDetailResendEmail()' class='btn btn-primary btn-sm'> Resend Email </a>");


                $('#txtViewTransactionDecriptionXmlCompressDetail').text(data.XmlCompressDetail);
                $('#txtViewTransactionDecriptionXmlCompressStatus').text(data.XmlCompressStatus);
                $('#txtViewTransactionDecriptionXmlCompressDateTime').text(data.XmlCompressDateTime);

                $('#txtViewTransactionDecriptionPdfIndexingDetail').text(data.PdfIndexingDetail);
                $('#txtViewTransactionDecriptionPdfIndexingStatus').text(data.PdfIndexingStatus);
                $('#txtViewTransactionDecriptionPdfIndexingDateTime').text(data.PdfIndexingDateTime);


                $('#txtViewTransactionDecriptionUpdateDate').text(data.UpdateDate);


                $("#modalViewTransactionDescription").modal('show');

            }
        });

    }

    function fnViewCancelTransactionDescription(){
        $("#modalViewTransactionDescription").modal('hide');
    }


    function fnDropdownTransactionSearchCompanyCode() {

        //$.getJSON("@Url.Action("DropDownList", "ProfileCompany")", function (data) {
        //    $.each(data, function (i, data) {
        //        $('<option>',
        //            {
        //                value: data.companyCode,
        //                text: data.companyCode
        //            }).html(data.companyCode).appendTo("#tranSearchCompanyCode");
        //    });
        //})
    }

    function fnDropdownTransactionSearchDocumentType() {

        $.getJSON("@Url.Action("DropDownList", "RdDocument")", function (data) {
            $.each(data, function (i, data) {
                $('<option>',
                    {
                        value: data.rdDocumentCode,
                        text: data.rdDocumentNameTh
                    }).html(data.rdDocumentNameTh).appendTo("#tranSearchDocumentType");
            });
        })
    }

    function fnDropdownTransactionSearchDataSource() {
        
        $('<option>',
        {
            value: "",
        }).html("--- Select Data Source ---").appendTo("#tranSearchDataSource");

        $.getJSON("@Url.Action("DropDownList", "ProfileDataSource")", function (data) {
            $.each(data, function (i, data) {
                $('<option>',
                    {
                        value: data.dataSourceName,
                        text: data.dataSourceName
                    }).html(data.dataSourceName).appendTo("#tranSearchDataSource");
            });
        })
    }

    function fnSearchTransaction(){

        var getBillingNo = $('#tranSearchBillingNo').val();
        var getStatus = $('#tranSearchStatus').val();
        var getIcO2c = $('#tranSearchIcOc').val();
        var getCustomerCode = $('#tranSearchCustomerCode').val();
        var getCompanyCode = $('#tranSearchCompanyCode').val();
        var getOutputType = $('#tranSearchOutputType').val();
        var getDocumentType = $('#tranSearchDocumentType').val();
        var getDateType = $('#tranSearchDateType').val();
        var getDateBetween = $('#tranSearchDateRang').val();
        var getDataSource = $('#tranSearchDataSource').val();

        var model = new Object();

        model.tranSearchBillingNo = getBillingNo;
        model.tranSearchStatus = getStatus;
        model.tranSearchIcO2c = getIcO2c;
        model.tranSearchCustomerCode = getCustomerCode;
        model.tranSearchCompanyCode = getCompanyCode;
        model.tranSearchOutputType = getOutputType;
        model.tranSearchDocumentType = getDocumentType;
        model.tranSearchDateType = getDateType;
        model.tranSearchDateBetween = getDateBetween;
        model.tranSearchDataSource = getDataSource
        //model.tranSearchSellOrg = getSellOrg;

        var JsonString = JSON.stringify(model);

        $('#tbTransactionMain').DataTable().destroy();
        $.blockUI();
        $('#tbTransactionMain').DataTable({
            
            "scrollY": false,
            "processing": true, // for show progress bar
            "serverSide": false, // for process server side
            "filter": true, // this is for disable filter (search box)
            "orderMulti": true, // for disable multiple column at once
            "pageLength": 50,
            "scrollX": true,

            "ajax":
                {
                    type: "GET",
                    url: "@Url.Action("Search", "transactionDescription")",
                    data: { transactionSearchJson : JsonString },
                    dataType: "json"
                },
                "columns": [

                {
                    width: "2%",
                    render: function (data, type, full, meta){
                        return '<input type="checkbox" class="dt-checkboxes" name="id[]" value="' + $('<div/>').text(data).html() + '">';}
                },

                {
                    data: "billingNumber",
                    width: "10%",
                    render: function (data, type, row) {
                        return' '+ data.substr( 0, 100 ) +  ' <a onclick="fnCallBillingDetail(' + row['transactionNo'] +');"> <i class="fas fa-eye text-primary"> </i> </a>';
                    }
                },
                {
                    data: "postingYear",
                    width: "5%",
                    render: function (data, type, row) {
                        return' '+ data.substr( 0, 100 ) +  ' <a onclick="fnCallBillingDetail(' + row['transactionNo'] +');"> <i class="fas fa-pen text-primary"> </i> </a>';
                    }
                },
                {
                    data: "companyCode",
                    width: "5%"
                },
                {
                    data: "customerId",
                    width: "5%"
                },
                {
                    data: "ic",
                    width: "5%",
                    render: function (data, type, row) {
                        return (data == "1") ? 'IC' : 'O2C';
                    }
                },
                {
                    data: "docType",
                    width: "5%"
                },
                {
                    data: "sourceName",
                    width: "5%"
                },
                {
                    data: "billingDate",
                    width: "10%",
                    className: "text-center",
                    render: function(data, type, row, meta) {
                            return moment(data).format('DD-MM-YYYY');
                    }
                },
                {
                    data: "processingDate",
                    width: "10%",
                    className: "text-center",
                    render: function(data, type, row, meta) {
                            return moment(data).format('DD-MM-YYYY');
                    }
                },
                {
                    data: "createDate",
                    width: "10%",
                    className: "text-center",
                    render: function(data, type, row, meta) {
                            return moment(data).format('DD-MM-YYYY');
                    }
                },
                {
                    data: "generateStatus",
                    width: "2%",
                    render: function (data, type, row) {
                        return fnCheckStatus(data);
                    }
                },
                {
                    data: "xmlSignStatus",
                    width: "3%",
                    render: function (data, type, row) {
                        return fnCheckStatus(data);
                    }
                },
                {
                    data: "pdfSignStatus",
                    width: "3%",
                    render: function (data, type, row) {
                        return fnCheckStatus(data);
                    }
                },
                {
                    data: "printStatus",
                    width: "3%",
                    render: function (data, type, row) {
                        return fnCheckStatus(data);
                    }
                },
                {
                    data: "emailSendStatus",
                    width: "3%",
                    render: function (data, type, row) {
                        return fnCheckStatus(data);
                    }
                },
                {
                    data: "xmlCompressStatus",
                    width: "3%",
                    render: function (data, type, row) {
                        return fnCheckStatus(data);
                    }
                },
                {
                    data: "pdfIndexingStatus",
                    width: "2%",
                    render: function (data, type, row) {
                        return fnCheckStatus(data);
                    }
                }
            ],

            select: {
                style:    'os',
                selector: 'td:first-child'
             },

             destroy : true

        }).ajax.reload();
        $.unblockUI();
        //RenderTransaction(JsonString);

    }
    
    function fnCheckStatus(status){
        if (status == "Successful"){
            return '<div class="text-success text-center icon-wrapper hovertext hoversuccess" data-hover="Successful"><svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-check-circle"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01"></polyline></svg></div>';
        }
        else if (status == "Failed"){
            return '<div class="text-danger text-center icon-wrapper hovertext hoverfail" data-hover="Failed"><svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-x-circle"><circle cx="12" cy="12" r="10"></circle><line x1="15" y1="9" x2="9" y2="15"></line><line x1="9" y1="9" x2="15" y2="15"></line></svg></div>';
        }
        else{
            return '<div class="text-warning text-center icon-wrapper hovertext hoverwait" data-hover="Watting"><svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-clock"><circle cx="12" cy="12" r="10"></circle><polyline points="12 6 12 12 16 14"></polyline></svg></div>';
        }
    }

    function fnGetCheckbox(){
        var table = $('#tbTransactionMain').DataTable();
        var data = table.rows( function ( idx, data, node ) {
        return $(node).find('.dt-checkboxes:input[type="checkbox"]').prop('checked');
        }).data().toArray();
        
        return data;
    }

    function fnResetStatusIndexing(){
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, Reset Status Indexing',
                confirmButtonClass: 'btn btn-primary',
                cancelButtonClass: 'btn btn-danger ml-1',
                buttonsStyling: false,
                }).then(function (result) {
                    if (result) {
                        data = fnGetCheckbox();
                        var updateby = $("#leftSideEmail").text();
                        
                        $.ajax({
                            type: "POST",
                            url: "@Url.Action("ResetStatusIndexing", "transactionDescription")",
                            data: { listData : data, updateby : updateby },
                            dataType: "json",
                            success: function (result) {
                                    if(result.status){
                                        fnSweetAlert_SaveSuccess();
                                        callTransactionDescriptionIndex();
                                    }
                                    else{
                                        fnSweetAlert_Error(result.erroR_MESSAGE);
                                    }
                            }
                        });
                    }
                })
    }
    
    function fnResetStatusXMLZip(){
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, Reset Status XML zip',
                confirmButtonClass: 'btn btn-primary',
                cancelButtonClass: 'btn btn-danger ml-1',
                buttonsStyling: false,
                }).then(function (result) {
                    if (result) {
                        data = fnGetCheckbox();
                        var updateby = $("#leftSideEmail").text();
                        
                        $.ajax({
                            type: "POST",
                            url: "@Url.Action("ResetStatusXMLZip", "transactionDescription")",
                            data: { listData : data, updateby : updateby },
                            dataType: "json",
                            success: function (result) {
                                    if(result.status){
                                        fnSweetAlert_SaveSuccess();
                                        callTransactionDescriptionIndex();
                                    }
                                    else{
                                        fnSweetAlert_Error(result.erroR_MESSAGE);
                                    }
                            }
                        });
                    }
                })
    }
    function fnResetStatusPrintZip(){
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, Reset Status Print zip',
                confirmButtonClass: 'btn btn-primary',
                cancelButtonClass: 'btn btn-danger ml-1',
                buttonsStyling: false,
                }).then(function (result) {
                    if (result) {
                        data = fnGetCheckbox();
                        var updateby = $("#leftSideEmail").text();
                        
                        $.ajax({
                            type: "POST",
                            url: "@Url.Action("ResetStatusPrintZip", "transactionDescription")",
                            data: { listData : data, updateby : updateby },
                            dataType: "json",
                            success: function (result) {
                                    if(result.status){
                                        fnSweetAlert_SaveSuccess();
                                        callTransactionDescriptionIndex();
                                    }
                                    else{
                                        fnSweetAlert_Error(result.erroR_MESSAGE);
                                    }
                            }
                        });
                    }
                })
    }
    function fnSyncStatusXMLSign(){
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, Sync Status XML Sign',
                confirmButtonClass: 'btn btn-primary',
                cancelButtonClass: 'btn btn-danger ml-1',
                buttonsStyling: false,
                }).then(function (result) {
                    if (result) {
                        data = fnGetCheckbox();
                        var updateby = $("#leftSideEmail").text();
                        
                        $.ajax({
                            type: "POST",
                            url: "@Url.Action("SyncStatusXMLSign", "transactionDescription")",
                            data: { listData : data, updateby : updateby },
                            dataType: "json",
                            success: function (result) {
                                    if(result.status){
                                        fnSweetAlert_SaveSuccess();
                                        callTransactionDescriptionIndex();
                                    }
                                    else{
                                        fnSweetAlert_Error(result.erroR_MESSAGE);
                                    }
                            }
                        });
                    }
                })
    }
    function fnSyncStatusPDFSign(){
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, Sync Status PDF Sign',
                confirmButtonClass: 'btn btn-primary',
                cancelButtonClass: 'btn btn-danger ml-1',
                buttonsStyling: false,
                }).then(function (result) {
                    if (result) {
                        data = fnGetCheckbox();
                        var updateby = $("#leftSideEmail").text();
                        
                        $.ajax({
                            type: "POST",
                            url: "@Url.Action("SyncStatusPDFSign", "transactionDescription")",
                            data: { listData : data, updateby : updateby },
                            dataType: "json",
                            success: function (result) {
                                    if(result.status){
                                        fnSweetAlert_SaveSuccess();
                                        callTransactionDescriptionIndex();
                                    }
                                    else{
                                        fnSweetAlert_Error(result.erroR_MESSAGE);
                                    }
                            }
                        });
                    }
                })
    }
    function fnResendEmail(){
        fnsendEmail(fnGetCheckbox());
    }
    function fnDetailResendEmail(){
        var listdata = new Array();
        data.BillingNumber = $('#txtViewTransactionDecriptionBillingNo').text();
        listdata.push(data);

        fnsendEmail(listdata);
    }
    function fnsendEmail(data){
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, Resend Email',
                confirmButtonClass: 'btn btn-primary',
                cancelButtonClass: 'btn btn-danger ml-1',
                buttonsStyling: false,
                }).then(function (result) {
                    if (result) {
                        var updateby = $("#leftSideEmail").text();
                        
                        $.ajax({
                            type: "POST",
                            url: "@Url.Action("ResendEmail", "transactionDescription")",
                            data: { listData : data, updateby : updateby },
                            dataType: "json",
                            success: function (result) {
                                    if(result.status){
                                        fnSweetAlert_SaveSuccess();
                                    }
                                    else{
                                        fnSweetAlert_Error(result.erroR_MESSAGE);
                                    }
                            }
                        });
                    }
                })
    }
    function DownloadFilePDF(transactionno) {
         DownloadFile(transactionno,"PDF");
    };
    function DownloadFileXML(transactionno) {
         DownloadFile(transactionno,"XML");
    };
    function DownloadFile(transactionno,filetype) {
                
        $.ajax({
            type: "POST",
            url: "@Url.Action("DownloadFile", "transactionDescription")",
            data: { TransactionNo : transactionno, Type : filetype},
            dataType: "text",
            success: function (resp) {
                data = $.parseJSON(resp)
                //Convert Base64 string to Byte Array.
                var bytes = Base64ToBytes(data.outpuT_DATA);
                var fileName = data.message;
                //Convert Byte Array to BLOB.
                var blob = new Blob([bytes], { type: "application/octetstream" });
 
                    //Check the Browser type and download the File.
                    var isIE = false || !!document.documentMode;
                    if (isIE) {
                        window.navigator.msSaveBlob(blob, fileName);
                    } else {
                        var url = window.URL || window.webkitURL;
                        link = url.createObjectURL(blob);
                        var a = $("<a />");
                        a.attr("download", fileName);
                        a.attr("href", link);
                        $("body").append(a);
                        a[0].click();
                        $("body").remove(a);
                    }
            }
        });
    };
    function Base64ToBytes(base64) {
        var s = window.atob(base64);
        var bytes = new Uint8Array(s.length);
        for (var i = 0; i < s.length; i++) {
            bytes[i] = s.charCodeAt(i);
        }
        return bytes;
    };
    
    function fnCallOutputSearchEmailDetail(getPk){
        $.ajax({
            type: "GET",
            url: "@Url.Action("Detail", "OutputSearchEmailSend")",
            data: { id : getPk },
            dataType: "json",
            success: function (result) {
                data = $.parseJSON(result);
                if(typeof data.OutputSearchEmailSendTo != 'undefined') {
                    $('#txtViewTransactionDecriptionEmailSendTo').text("EmailTo : " + data.OutputSearchEmailSendTo);
                }else{
                    $('#txtViewTransactionDecriptionEmailSendTo').text("EmailTo : ");
                }

                if(typeof data.OutputSearchEmailSendCC != 'undefined') {
                    $('#txtViewTransactionDecriptionEmailSendCC').text("EmailCC : " + data.OutputSearchEmailSendCC);
                }else{
                    $('#txtViewTransactionDecriptionEmailSendCC').text("EmailCC : ");
                }
            }
        });
    }
    function fnCallOutputSearchPrintingDetail(getPk){
        $.ajax({
            type: "GET",
            url: "@Url.Action("Detail", "OutputSearchPrinting")",
            data: { id : getPk },
            dataType: "json",
            success: function (result) {
                data = $.parseJSON(result);
                if(typeof data.OutputSearchPrintingFullPath != 'undefined') {
                    $('#txtViewTransactionDecriptionPdfIndexingPath').text("Path : " + data.OutputSearchPrintingFullPath);
                }else{
                    $('#txtViewTransactionDecriptionPdfIndexingPath').text("Path : ");
                }
            }
        });
    }
    function fnCallOutputSearchXmlZipDetail(getPk){
        $.ajax({
            type: "GET",
            url: "@Url.Action("Detail", "OutputSearchXmlZip")",
            data: { id : getPk },
            dataType: "json",
            success: function (result) {
                data = $.parseJSON(result);
                if(typeof data.OutputSearchXmlZipFullPath != 'undefined') {
                    $('#txtViewTransactionDecriptionXmlCompressPath').text("Path : " + data.OutputSearchXmlZipFullPath);
                }else{
                    $('#txtViewTransactionDecriptionXmlCompressPath').text("Path : ");
                }
            }
        });
    }

    
    function callTransactionDescriptionIndex() {
        setTimeout(function(){
            $.blockUI();
            $("#contentPartial").load("@Url.Action("Index", "TransactionDescription")");
            $.unblockUI();
        }, 500);
    }

    //Add to cart
    function fnAddToCart(){
        var datas = fnGetCheckbox();
        if(datas.length == 0){
            fnSweetAlert_WarningSelectItem();
        }else{
            Swal.fire({
                title: 'Are you sure to add a cart?',
            //text: "" + datas,
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes',
            confirmButtonClass: 'btn btn-primary',
            cancelButtonClass: 'btn btn-danger ml-1',
            buttonsStyling: false,
            }).then(function (result) {
                if (result.isConfirmed) {
                    //console.log(datas);
                    $.blockUI();
                    var models = [];
                    datas.forEach(obj=>{
                        var model = new Object();

                        model.TransactionNo = obj.transactionNo;
                        model.BillingNumber = obj.billingNumber;
                        model.CompanyCode = obj.companyCode;

                        model.CreateBy = $("#leftSideEmail").text();
                        model.CreateDate = new Date();
                        model.UpdateBy = $("#leftSideEmail").text();
                        model.UpdateDate = new Date();
                        models.push(model);
                    });
                    //console.log(models);
                    var getJsonString = JSON.stringify(models);
                    //console.log(getJsonString);
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("AddToCart", "RequestCart")",
                        data: { jsonString: getJsonString },
                        dataType: "text",
                        success: function (res) {
                            var ret = $.parseJSON(res);
                            if(ret.status){
                                fnRenderTopCart();
                                fnSweetAlert_Success();
                            }
                            else{
                                fnSweetAlert_Error(ret.erroR_MESSAGE);
                            }
                            $.unblockUI();
                        }
                    });
                }
            });
        }
    }
    
    function Base64ToBytes(base64) {
        var s = window.atob(base64);
        var bytes = new Uint8Array(s.length);
        for (var i = 0; i < s.length; i++) {
            bytes[i] = s.charCodeAt(i);
        }
        return bytes;
    };

    function fnExport(){
        var getBillingNo = $('#tranSearchBillingNo').val();
        var getStatus = $('#tranSearchStatus').val();
        var getIcO2c = $('#tranSearchIcOc').val();
        var getCustomerCode = $('#tranSearchCustomerCode').val();
        var getCompanyCode = $('#tranSearchCompanyCode').val();
        var getOutputType = $('#tranSearchOutputType').val();
        var getDocumentType = $('#tranSearchDocumentType').val();
        var getDateType = $('#tranSearchDateType').val();
        var getDateBetween = $('#tranSearchDateRang').val();
        var getDataSource = $('#tranSearchDataSource').val();

        var model = new Object();

        model.tranSearchBillingNo = getBillingNo;
        model.tranSearchStatus = getStatus;
        model.tranSearchIcO2c = getIcO2c;
        model.tranSearchCustomerCode = getCustomerCode;
        model.tranSearchCompanyCode = getCompanyCode;
        model.tranSearchOutputType = getOutputType;
        model.tranSearchDocumentType = getDocumentType;
        model.tranSearchDateType = getDateType;
        model.tranSearchDateBetween = getDateBetween;
        model.tranSearchDataSource = getDataSource
        //model.tranSearchSellOrg = getSellOrg;

        var JsonString = JSON.stringify(model);

        $.ajax({
            type: "GET",
            url: "@Url.Action("ExportFile", "transactionDescription")",
            data: { jsonSearchString : JsonString },
            contentType: 'application/json; charset=utf-8',
            //dataType: "json",
            success: function (response) {
                //Convert Base64 string to Byte Array.
                var bytes = Base64ToBytes(response.outpuT_DATA);
                var fileName = response.message;
                //Convert Byte Array to BLOB.
                var blob = new Blob([bytes], { type: "application/octetstream" });

                //Check the Browser type and download the File.
                var isIE = false || !!document.documentMode;
                if (isIE) {
                    window.navigator.msSaveBlob(blob, fileName);
                } else {
                    var url = window.URL || window.webkitURL;
                    link = url.createObjectURL(blob);
                    var a = $("<a />");
                    a.attr("download", fileName);
                    a.attr("href", link);
                    $("body").append(a);
                    a[0].click();
                    $("body").remove(a);
                }
            }
        });
    }
</script>