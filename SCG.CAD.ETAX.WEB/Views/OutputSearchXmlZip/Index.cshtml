@{
    ViewData["Title"] = "OutputSearchXmlZip Profile";
    Layout = null;
}


@await Html.PartialAsync("~/Views/OutputSearchXmlZip/_Search.cshtml")
<br />
<br />
<br />
<div class="divider">
</div>




@await Html.PartialAsync("~/Views/OutputSearchXmlZip/_Content.cshtml")


<script type="text/javascript">

    $(document).ready(function () {

        $('#OutputSearchXmlZipCustomerCode').select2();
        $('#OutputSearchXmlZipStatus').select2();
        $('#OutputSearchXmlZipDocType').select2();

        $("#OutputSearchXmlZipDate").flatpickr({
            mode: "range",
            dateFormat: "d-m-Y"
        });

        fnDropdownOutputSearchXmlZipCompanyCode();
        //fnDropdownOutputSearchXmlZipDocType();

        $("#tbOutputSearchXmlZipMain").removeData();

        RenderOutputSearchXmlZip('');

    });


    function fnDropdownOutputSearchXmlZipCompanyCode() {

        $.getJSON("@Url.Action("DropDownList", "ProfileCompany")", function (data) {
            $.each(data, function (i, data) {
                $('<option>',
                    {
                        value: data.companyCode,
                        text: data.companyCode
                    }).html(data.companyCode).appendTo("#OutputSearchXmlZipCustomerCode");
            });
        })
    }

    function fnDropdownOutputSearchXmlZipDocType() {

        $.getJSON("@Url.Action("DropDownList", "RdDocument")", function (data) {
            $.each(data, function (i, data) {
                $('<option>',
                    {
                        value: data.rdDocumentCode,
                        text: data.rdDocumentNameTh
                    }).html(data.rdDocumentNameTh).appendTo("#OutputSearchXmlZipDocType");
            });
        })
    }

    function fnSearchOutputDataPrinting(){

        $("#tbOutputSearchXmlZipMain").remove();


        var getCompanyCode = $('#OutputSearchXmlZipCustomerCode').val();
        var getDate = $('#OutputSearchXmlZipDate').val();

        var model = new Object();

        model.outPutSearchCompanyCode = getCompanyCode;
        model.outPutSearchDate = getDate;

        var JsonString = JSON.stringify(model);

                //alert(JsonString);

        RenderOutputSearchXmlZip(JsonString);
    }

    function RenderOutputSearchXmlZip(JsonString){

        var table = $("#tbOutputSearchXmlZipMain").DataTable({

            "scrollY": true,
            "scrollX": true,
            "processing": true, // for show progress bar
            "serverSide": false, // for process server side
            "filter": true, // this is for disable filter (search box)
            "orderMulti": true, // for disable multiple column at once
            "searching": true,
            "pageLength": 10,

            "ajax": {
                url: "@Url.Action("List", "OutputSearchXmlZip")",
                type: "POST",
                data: { SearchJson : JsonString },
                datatype: "json"
            },


            "columns": [

                {
                    data: "outputSearchXmlZipNo",
                    className: "text-center",
                    width: "5%",
                    visible: false
                },
                {
                    //data: "OutputSearchXmlZipNo",
                    className: "text-center",
                    visible: false,
                    width: "5%",
                    render: function (data, type, row, meta) {
                        return meta.row + meta.settings._iDisplayStart + 1;
                    }
                },
                {
                    data: "outputSearchXmlZipCompanyCode",
                    width: "10%"
                },
                {
                    data: "outputSearchXmlZipFileName",
                    width: "20%",
                    render: function (data, type, row) {
                        return' '+ data.substr( 0, 30 ) + '...' + ' <a onclick="fnCallFullFilePathXml(' + row['outputSearchXmlZipNo'] +');"> <i class="fas fa-folder-open"> </i> </a>';
                    }
                },
                {
                    data: "outputSearchXmlZipDocType",
                    width: "10%",
                    render: function (data, type, row) {
                        return'<div class="badge badge-light-primary"> '+ data +' </div>';
                    }
                },
                {
                    data: "outputSearchXmlZipFullPath",
                    width: "10%",
                    render: function (data, type, row) {
                        return'<a class="btn btn-primary btn-sm"> Download </a>';
                    }
                },
                {
                    data: "outputSearchXmlZipDowloadStatus",
                    width: "10%",
                    visible: false
                },
                {
                    data: "createDate",
                    render: function(data, type, row, meta) {
                            return moment(data).format('YYYY-MM-DD')},
                    width: "10%"
                },
                {
                    data: null,
                    className: "dt-center editor-edit text-center text-warning",
                    defaultContent: '<i class="pointer fas fa-clock"/> </i>',
                    orderable: false,
                    width: "2%"
                }
            ]
        });

        table.on( 'order.dt search.dt', function () {
            table.column(1, {search:'applied', order:'applied'}).nodes().each( function (cell, i) {
                cell.innerHTML = i+1;
            } );
        } ).draw();


        $('#OutputSearchXmlZipCustomerCode').on( 'change', function () {
            var valueCustomer = $('#OutputSearchXmlZipCustomerCode').val();

            if(valueCustomer.includes('All')){
                table.columns(2).search('').draw();
            }else{
                    table.column(2).search(this.value).draw();
            }
        } );

        $('#OutputSearchXmlZipDocType').on( 'change', function () {
            var valueDocType = $('#OutputSearchXmlZipDocType').val();

            if(valueDocType.includes('All')){
                table.columns(4).search('').draw();
            }else{
                    table.column(4).search(this.value).draw();
            }
        } );

        $('#OutputSearchXmlZipStatus').on( 'change', function () {
            var valueDownloadStatus = $('#OutputSearchXmlZipStatus').val();

            if(valueDownloadStatus.includes('All')){
                table.columns(6).search('').draw();
            }else{
                    table.column(6).search(valueDownloadStatus).draw();
            }
        } );

        var minDate, maxDate;

        $('#OutputSearchXmlZipDate').on( 'change', function () {
            var valueDate = this.value;

            if(valueDate.includes('to')){
                const myArray = valueDate.split(" to ");


                minDate = myArray[0];
                maxDate = myArray[1];


                var arr=[];

                var getDaysArray = function(minDate, maxDate) {

                    for(dt=new Date(minDate); dt<=new Date(maxDate); dt.setDate(dt.getDate()+1)){

                        let d = dt;

                        let month = (d.getMonth() + 1).toString().padStart(2, '0');
                        let day = d.getDate().toString().padStart(2, '0');
                        let year = d.getFullYear();

                        let dtnew = year+"-"+month+"-"+day;

                        arr.push(dtnew);

                        //alert(dtnew);


                    }
                    return arr;
                };

                var daylist = getDaysArray(new Date(minDate),new Date(maxDate));
                daylist.join("\n")

                alert(daylist);

                table.columns(6).search(daylist).draw();
            }

        } );



        EditOutputSearchXmlZip(table);
        DeleteOutputSearchXmlZip(table);
    }


    function EditOutputSearchXmlZip(table){

        $('#tbOutputSearchXmlZipMain').on('click', 'td.editor-edit', function () {

            var data = table.row($(this).closest('tr')).data();

            var getPK = data[Object.keys(data)[0]];

            callOutputSearchXmlZipGetDetailController(getPK);
        });
    }


    function fnCallFullFilePathXml(PK){
        
        $('#modalGetOutputSearchXmlFullPath').modal('show');

        $('#fullPathXmlGetFillName').empty();
        $('#fullPathXmlGetFillPath').empty();
        $('#fullPathXmlGetDatetime').empty();

        $.ajax({
            type: "GET",
            url: "@Url.Action("Detail", "OutputSearchXmlZip")",
            data: { id : PK },
            dataType: "json",
            success: function (result) {

                data = $.parseJSON(result)

                $('#fullPathXmlGetFillName').append(data.OutputSearchXmlZipFileName);
                $('#fullPathXmlGetFillPath').append(data.OutputSearchXmlZipFullPath);
                $('#fullPathXmlGetDatetime').append(data.CreateDate);

            }
        });
    }

    function fnCancelGetOutputSearchXmlFullPath(){
        $('#modalGetOutputSearchXmlFullPath').modal('hide');
    }

    function fnTimelineCancelOutputSearchXmlZip(){

        $("#modalUpdateOutputSearchXmlZip").modal('hide');
    } 

    function ExportOutputSearchXmlZip(){

        $.blockUI();

        callOutputSearchXmlZipExportController();

        $.unblockUI();
    }


    // [Begin] Ajax call Controller

    function callOutputSearchXmlZipGetDetailController(getPK){
        $.ajax({
            type: "GET",
            url: "@Url.Action("Detail", "OutputSearchXmlZip")",
            data: { id : getPK },
            dataType: "json",
            success: function (result) {

                data = $.parseJSON(result)

                $("#modalUpdateOutputSearchXmlZip").modal('show');

            }
        });
    }


    function callOutputSearchXmlZipExportController(){
        $.ajax({
            type: "GET",
            url: "@Url.Action("ExportToCsv", "OutputSearchXmlZip")",
            //data: { id : getPK },
            contentType: 'application/json; charset=utf-8',
            //dataType: "json",
            success: function (response) {

                var blob = new Blob([response], {type: 'text/csv;charset=utf-8;'});

                var downloadUrl = URL.createObjectURL(blob);

                var a = document.createElement("a");

                a.href = downloadUrl;

                a.download = "scg-etax-OutputSearchXmlZip.csv";

                document.body.appendChild(a);

                a.click();
            }
        });
    }

    // [end] Ajax call Controller




    function callOutputSearchXmlZipIndex() {
        setTimeout(function(){
            $.blockUI();
            $("#render-OutputSearchXmlZip-create").load("@Url.Action("Index", "OutputSearchXmlZip")");
            $.unblockUI();
        }, 500);
    }


</script>






